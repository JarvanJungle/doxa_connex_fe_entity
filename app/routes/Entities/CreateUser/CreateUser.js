/* eslint-disable jsx-a11y/click-events-have-key-events */
/* eslint-disable jsx-a11y/no-static-element-interactions */
/* eslint-disable max-len */
import React, { useState, useEffect, useMemo } from "react";
import { useHistory } from "react-router-dom";
import UserDataService from "services/UserService";
import { useTranslation } from "react-i18next";
import { StickyFooter } from "components/StickyFooter/StickyFooter";
import { AvForm, AvField } from "availity-reactstrap-validation";
import ButtonSpinner from "components/ButtonSpinner";
import Select from "react-select";
import {
    AgGridReact
} from "components/agGrid";

import {
    Container,
    Row,
    Card,
    CardBody,
    CardHeader,
    CardTitle,
    UncontrolledModal,
    ModalHeader,
    ModalBody,
    ModalFooter,
    Nav,
    NavItem,
    NavLink,
    FormGroup,
    Button,
    Col,
    Label, CustomInput
} from "components";
import ModulesTable from "routes/EntityAdmin/ManageFeaturesMatrix/ModulesTable";

import { HeaderMain } from "routes/components/HeaderMain";
import useToast from "routes/hooks/useToast";
import { v4 as uuidv4 } from "uuid";
import IconButton from "@material-ui/core/IconButton";
import { RadioButton } from "primereact/radiobutton";
import _ from "lodash";
import FeaturesMatrixService from "services/FeaturesMatrixService/FeaturesMatrixService";
import ManageRolesService from "services/ManageRolesService/ManageRolesService";
import { RESPONSE_STATUS } from "helper/constantsDefined";
import { debounce, getCurrentCompanyUUIDByStore } from "helper/utilities";
import { useSelector } from "react-redux";
import { defaultColDef } from "helper/utilities";
import { MANAGE_ROLES_ROUTES } from "routes/EntityAdmin/ManageRoles";
import { Link } from "react-router-dom";
import AdministratorCheckTable from "../AdministratorCheckTable";
import classes from "./CreateUser.module.scss";
import DialCodes from "/public/assets/DialCodes.js";
import {
    ReadRender, WriteRender, ApproveRender, CheckboxRenderer
} from "./components";
import { RolesListColDefs, PermissionColDefs } from "./ColumnDefs";

const CreateUser = (props) => {
    const { location } = props;
    const showToast = useToast();
    const { t } = useTranslation();
    const history = useHistory();

    const permissionReducer = useSelector((state) => state.permissionReducer);

    const [companiesRoles, setCompaniesRoles] = useState([]);
    const [name, setName] = useState("");
    const [email, setEmail] = useState("");
    const [workNumber, setWorkNumber] = useState("");
    const [dialCode, setDialCode] = useState("");
    const [roles, setRoles] = useState([]);
    const [inputPasswordType, setInputPasswordType] = useState("password");
    const [passwordOption, setPasswordOption] = useState("autogeneratedPassword");
    const [customPassword, setCustomPassword] = useState("");
    const [passwordSelection] = useState(["autogeneratedPassword", "customPassword"]);
    const [activeTab, setActiveTab] = useState(1);
    const [remarks, setRemarks] = useState("");
    const [width, setWidth] = useState(6);
    const [pathRoute, setPathRoute] = useState("");
    const [isLoading, setIsLoading] = useState(false);
    const [listModules, setListModules] = useState([]);
    const [tabList, setTabList] = useState([]);
    const [dataChange, setDataChange] = useState(null);
    const [currentCompanyUuid, setCurrentCompanyUuid] = useState("");
    const [gridDesignationAPI, setGridDesignationAPI] = useState(null);
    const [designation, setDesignation] = useState("");

    // showing all companies available for adding
    const [allCompanies, setAllCompanies] = useState([]);
    const [gridCompanies, setGridCompanies] = useState([]);
    const [gridApi, setGridApi] = useState(null);

    const userHasRBACRole = useMemo(() => permissionReducer?.userPermission?.ADMIN?.features?.find((e) => e.featureCode === "rbacRole")?.actions?.read, [permissionReducer]);

    const columnDefs = [
        {
            headerName: t("Company Name"),
            field: "entityName"
        }
    ];

    const userManagement = {
        name: "User Management",
        info: [
            {
                text: "Manage Users",
                value: "manageUsers"
            },
            {
                text: "Manage Admin Matrix",
                value: "manageAdminMatrix"
            },
            {
                text: "Manage User Matrix",
                value: "manageUserMatrix"
            },
            {
                text: "Manage Approver Matrix",
                value: "manageApproverMatrix"
            }
        ]
    };

    const entitySetup = {
        name: "Entity Setup",
        info: [
            {
                text: "Manage Currencies",
                value: "manageCurrencies"
            },
            {
                text: "Manage Supplier Bank Account",
                value: "manageSupplierBankAccount"
            },
            {
                text: "Manage Suppliers",
                value: "manageSuppliers"
            }
        ]
    };

    const bankConnection = {
        name: "Bank Connection",
        info: [
            {
                text: "Manage Bank Connection",
                value: "manageBankConnection"
            },
            {
                text: "Manage Bank Account",
                value: "manageBankAccount"
            }
        ]
    };

    // const taskManagementTable = [
    //     {
    //         name: "Payment",
    //         value: "Payment"
    //     },
    //     {
    //         name: "Invoice Financing",
    //         value: "InvoiceFinancing"
    //     },
    //     {
    //         name: "Developer Financing",
    //         value: "DeveloperFinancing"
    //     },
    //     {
    //         name: "Maincon Financing",
    //         value: "MainconFinancing"
    //     },
    //     {
    //         name: "Supply Chain Financing",
    //         value: "SupplyChainFinancing"
    //     }
    // ];

    const extractCompanyAuthData = (companyAuth) => {
        const grouped = _.groupBy(companyAuth, "moduleCode");
        const listModulesTemp = [];

        Object.keys(grouped).forEach((key) => {
            let features = grouped[key];
            features = features.map((feature) => ({
                feature: feature.feature,
                featureCode: feature.featureCode,
                actions: {
                    read: false,
                    write: false,
                    approve: false
                }
            }));
            listModulesTemp.push({
                moduleCode: key,
                features
            });
        });
        return listModulesTemp;
    };

    const getEntityCompanies = () => {
        UserDataService.getCompanies().then((response) => {
            if (response.data.status === "OK") {
                setAllCompanies(response.data.data);
            } else {
                showToast("error", response.data.message);
            }
        }).catch((error) => {
            showToast("error", error.response.data.message);
        });
    };

    const getListModule = async (companyUuid) => {
        try {
            let companyModules = [];

            const companyAuthResponse = await FeaturesMatrixService
                .getCompanyAuthorities(companyUuid);
            if (companyAuthResponse.data.status === RESPONSE_STATUS.OK) {
                const companyData = companyAuthResponse.data.data;
                companyModules = extractCompanyAuthData(companyData);
            } else {
                throw new Error(companyAuthResponse.data.message);
            }
            setListModules(companyModules);
            setCurrentCompanyUuid(companyUuid);
        } catch (error) {
            showToast("error", error.response ? error.response.data.message : error.message);
        }
    };

    const getListRole = async (companyUuid) => {
        try {
            const rolesResponse = await ManageRolesService.getRolesList(companyUuid);
            if (rolesResponse.data.status === RESPONSE_STATUS.OK) {
                setRoles(rolesResponse.data.data);
            } else {
                throw new Error(rolesResponse.data.message);
            }
        } catch (error) {
            showToast("error", error.response ? error.response.data.message : error.message);
        }
    };

    useEffect(() => {
        const companyUuid = getCurrentCompanyUUIDByStore(permissionReducer);
        if (companyUuid) {
            getListModule(companyUuid);
            getListRole(companyUuid);
        }

        getEntityCompanies();
        if (props.location.pathname.includes("/company-users/create")) {
            setTabList([
                { id: 1, name: "Task Management" },
                { id: 4, name: "Security & Login", icon: "fa fa-unlock-alt" },
                { id: 3, name: "Remarks" }
            ]);
        } else {
            setTabList([
                { id: 1, name: "Task Management" },
                { id: 2, name: "Admin Administrator" },
                { id: 3, name: "Remarks" }
            ]);
        }

        if (props.history.location.pathname.includes("company")) {
            setWidth(12);
            setPathRoute("company");
        } else if (props.history.location.pathname.includes("organization")) {
            setPathRoute("organization");
        }
    }, [permissionReducer]);

    const removeCompany = (companyUUID) => {
        // remove the company from the user
        const filteredCompanies = companiesRoles.filter(
            (companyRole) => companyRole.companyUuid !== companyUUID
        );
        setCompaniesRoles(filteredCompanies);
    };

    const onGridReady = (params) => {
        setGridApi(params.api);
        params.api.sizeColumnsToFit();
        // filter and only show non selected companies
        const array = [];
        allCompanies.forEach((company) => {
            let selected = false;
            companiesRoles.forEach((selectedCom) => {
                if (company.uuid === selectedCom.companyUuid) {
                    selected = true;
                }
            });
            if (selected === false) {
                array.push(company);
            }
        });
        setGridCompanies(array);
    };

    const handleAddCompanies = () => {
        const selectedCompanies = gridApi.getSelectedNodes();
        const tempCompaniesRoles = [...companiesRoles];
        for (let i = 0; i < selectedCompanies.length; i++) {
            const newCompany = { companyName: selectedCompanies[i].data.entityName, companyUuid: selectedCompanies[i].data.uuid, role: ["ENTITY_USER"] };
            tempCompaniesRoles.push(newCompany);
        }
        setCompaniesRoles(tempCompaniesRoles);
    };

    const passwordSelect = (e) => {
        setPasswordOption(e.target.id);
        if (e.target.id === passwordSelection[0] || passwordSelection[1]) {
            setCustomPassword("");
        }
    };

    const passwordOnCustom = (e) => {
        setCustomPassword(e.target.value);
    };

    const handleInvalidSubmit = () => {
        showToast("error", "Validation error, please check your input");
    };

    const handleValidSubmit = () => {
        if(dialCode === ""){
            showToast("error", "Dial Code hasn't been entered");
            return;
        }
        if (passwordOption !== "") {
            if (!(passwordOption === passwordSelection[1] && customPassword === "")) {
                setIsLoading(true);
                let user = {};
                if (pathRoute === "company") {
                    const tempCompaniesRoles = [];
                    const companyRole = JSON.parse(localStorage.getItem("companyRole"));
                    const newCompanyRole = { companyName: companyRole.companyName, companyUuid: companyRole.companyUuid, role: ["ENTITY_USER"] };
                    tempCompaniesRoles.push(newCompanyRole);
                    user = {
                        name,
                        email,
                        designation,
                        workNumber,
                        companiesRoles: tempCompaniesRoles,
                        password: customPassword,
                        countryCode: dialCode,
                        remarks
                    };
                } else if (pathRoute === "organization") {
                    user = {
                        name,
                        email,
                        designation,
                        workNumber,
                        companiesRoles,
                        password: customPassword,
                        countryCode: dialCode,
                        remarks
                    };
                }
                UserDataService.createUser(user).then((response) => {
                    if (response.data.status === "OK") {
                        const { data } = response.data;
                        const roleUuids = [];
                        gridDesignationAPI.forEachNode((node) => {
                            if (node.data.selected === true) {
                                roleUuids.push(node.data.uuid);
                            }
                        });
                        ManageRolesService.assignRoleToUser(
                            currentCompanyUuid, data, roleUuids
                        ).then((responseAssignRole) => {
                            if (responseAssignRole.data.status === RESPONSE_STATUS.OK) {
                                showToast("success", "User Created");
                                setIsLoading(false);
                                if (pathRoute === "organization") {
                                    history.push(`/${pathRoute}/users/list`);
                                } else {
                                    history.push(`/${pathRoute}/users`);
                                }
                            }
                        });
                    } else {
                        showToast("error", "Duplicated email address");
                        setIsLoading(false);
                    }
                }).catch((error) => {
                    showToast("error", error.response.data.message);
                    setIsLoading(false);
                });
            }

            const featuresList = [];
            listModules.forEach((module) => {
                module.features.forEach((feature) => {
                    const actions = [];
                    Object.keys(feature.actions).forEach((key) => {
                        if (feature.actions[key]) {
                            actions.push(key.toUpperCase());
                        }
                    });
                    featuresList.push({
                        featureCode: feature.featureCode,
                        actions
                    });
                });
            });
        }
    };

    const doNothing = () => {};

    const handleCompanyAdminCheckbox = (event) => {
        const allCompaniesRoles = [...companiesRoles];
        for (let i = 0; i < allCompaniesRoles.length; i++) {
            if (allCompaniesRoles[i].companyUuid === event.target.id) {
                const newRoles = [...allCompaniesRoles[i].role];
                let exist = false;
                for (let j = 0; j < allCompaniesRoles[i].role.length; j++) {
                    if (allCompaniesRoles[i].role[j] === "ENTITY_USER") {
                        newRoles[j] = "COMPANY_ADMIN";
                        const newCompany = { ...allCompaniesRoles[i], role: newRoles };
                        allCompaniesRoles.splice(i, 1, newCompany);
                        exist = true;
                        break;
                    } else if (allCompaniesRoles[i].role[j] === "COMPANY_ADMIN") {
                        newRoles[j] = "ENTITY_USER";
                        const newCompany = { ...allCompaniesRoles[i], role: newRoles };
                        allCompaniesRoles.splice(i, 1, newCompany);
                        exist = true;
                        break;
                    }
                }
                if (exist === false) {
                    newRoles.push("COMPANY_ADMIN");
                    const newCompany = { ...allCompaniesRoles[i], role: newRoles };
                    allCompaniesRoles.splice(i, 1, newCompany);
                }
            }
        }
        setCompaniesRoles(allCompaniesRoles);
    };

    const handleTabClick = (tabId) => {
        setActiveTab(tabId);
    };

    const handleAdministratorCheckbox = (event) => {
        console.log(event.target);
    };

    const checkCompanyAdmin = (companiesRole) => {
        for (let i = 0; i < companiesRole.role.length; i++) {
            if (companiesRole.role[i] === "COMPANY_ADMIN") {
                return true;
            }
        }
        return false;
    };

    const onChangeAction = (action, event, data) => {
        setDataChange({ action, event, data });
    };

    useEffect(() => {
        if (!_.isEmpty(dataChange)) {
            const { action, event, data } = dataChange;
            const { checked } = event.target;
            const { feature: { featureCode }, moduleCode } = data;
            const modules = [];
            listModules.forEach((module) => {
                if (module.moduleCode === moduleCode) {
                    const listFeature = module.features.map((item) => {
                        if (item.feature.featureCode === featureCode) {
                            return {
                                ...item,
                                actions: {
                                    ...item.actions,
                                    [action]: checked
                                }
                            };
                        }
                        return item;
                    });
                    modules.push({
                        features: listFeature,
                        moduleCode
                    });
                } else {
                    modules.push(module);
                }
            });
            setListModules(modules);
        }
    }, [dataChange]);


    const SingleValue = ({ data, ...props }) => {
        if(data.value ==="") return <div style={{opacity: '0.4'}}>{data.label}</div>
        return (<div>{"+" + data.value}</div>);
    };

    return (
        
        <>
            <AvForm onValidSubmit={debounce(handleValidSubmit)} onInvalidSubmit={debounce(handleInvalidSubmit)}>
                {/* <AvForm> */}
                <Container fluid>
                    <Row className="mb-1">
                        <Col lg={12}>
                            <HeaderMain
                                title={pathRoute === "organization" ? t("Create New Organization User") : t("CreateNewCompanyUser")}
                                className="mb-3 mb-lg-3"
                            />
                        </Col>
                    </Row>
                    <Row className="mb-5">
                        <Col lg={12}>
                            <Card>
                                <CardHeader tag="h6">
                                    {t("User Profile")}
                                </CardHeader>
                                <CardBody>
                                    <Row className="mb-2">
                                        <Col md={2} className="label-required">
                                            <label
                                                htmlFor="userName"
                                                className={classes.inputText1}
                                            >
                                                {" "}
                                                {t("User Name")}
                                                {" "}
                                            </label>
                                        </Col>
                                        <Col md={4}>
                                            <FormGroup>
                                                <AvField
                                                    type="text"
                                                    name="userName"
                                                    placeholder={t("EnterUserName")}
                                                    className={classes.inputClass}
                                                    value={name}
                                                    onChange={(e) => setName(e.target.value)}
                                                    validate={{
                                                        required: { value: true, errorMessage: t("EnterValidUserName") },
                                                        minLength: { value: 2, errorMessage: t("UserNameValidation") },
                                                        maxLength: { value: 100, errorMessage: t("UserNameValidation") },
                                                        pattern: { value: "^[^!@#$%^&*()]+$", errorMessage: t("EnterValidUserName") }
                                                    }}
                                                    required
                                                />
                                            </FormGroup>
                                        </Col>
                                        <Col md={2} className="label-required">
                                            <label
                                                htmlFor="email"
                                                className={classes.inputText1}
                                            >
                                                {" "}
                                                {t("Info Email")}
                                                {" "}
                                            </label>
                                        </Col>
                                        <Col md={4}>
                                            <FormGroup>
                                                <AvField
                                                    type="email"
                                                    name="email"
                                                    placeholder={t("EnterEmail")}
                                                    className={classes.inputClass}
                                                    value={email}
                                                    onChange={(e) => setEmail(e.target.value)}
                                                    validate={{
                                                        email: { value: true, errorMessage: t("EnterValidEmail") },
                                                        required: { value: true, errorMessage: t("EnterValidEmail") },
                                                        minLength: { value: 2, errorMessage: t("EmailLengthValidation") },
                                                        maxLength: { value: 250, errorMessage: t("EmailLengthValidation") }
                                                    }}
                                                    required
                                                />
                                            </FormGroup>
                                        </Col>
                                    </Row>
                                    <Row className="mb-2">
                                        <Col md={2} className="label-required">
                                            <label
                                                htmlFor="workNumber"
                                                className={classes.inputText1}
                                            >
                                                {" "}
                                                {t("Work Phone")}
                                                {" "}
                                            </label>
                                        </Col>
                                        <Col md={4}>
                                            <FormGroup>
                                                <Row>
                                                    <Col lg={4} className="pr-0">
                                                        <Select
                                                            onChange={
                                                                (e) =>{ 
                                                                    setDialCode(e.value)
                                                                }
                                                            }
                                                            components={{ SingleValue }}
                                                            options={DialCodes.dialCodes
                                                                .map((code) => 
                                                                    ({
                                                                        label: code.label + " (+" + code.value + ")",
                                                                        value: code.value
                                                                    })
                                                                )}
                                                            isSearchable
                                                            defaultValue={{value:"",label:"Dial Code"}}
                                                        />
                                                    </Col>
                                                    <Col lg={8} className="pl-1">
                                                        <AvField
                                                            type="text"
                                                            name="workNumber"
                                                            placeholder={t("EnterWorkNumber")}
                                                            className={classes.inputClass}
                                                            value={workNumber}
                                                            onChange={
                                                                (e) => setWorkNumber(e.target.value)
                                                            }
                                                            validate={{
                                                                required: { value: true, errorMessage: t("EnterValidWorkNumber") },
                                                                minLength: { value: 5, errorMessage: t("WorkNumberLengthValidation") },
                                                                maxLength: { value: 20, errorMessage: t("WorkNumberHasExceededMaxLength") },
                                                                pattern: { value: "^[^!@#$%^&*()][0-9-() ]+$", errorMessage: t("EnterValidWorkNumber") }
                                                            }}
                                                            required
                                                        />
                                                    </Col>
                                                </Row>
                                            </FormGroup>
                                        </Col>
                                        <Col md={2}>
                                            <label
                                                htmlFor="designation"
                                                className={classes.inputText1}
                                            >
                                                {" "}
                                                {t("Designation")}
                                                {" "}
                                            </label>
                                        </Col>
                                        <Col md={4}>
                                            <FormGroup>
                                                <AvField
                                                    type="text"
                                                    name="designation"
                                                    placeholder={t("Enter Designation")}
                                                    className={classes.inputClass}
                                                    value={designation}
                                                    onChange={(e) => setDesignation(e.target.value)}
                                                    validate={{
                                                        pattern: { value: "^[^!@#$%^&*()]+$", errorMessage: t("PleaseEnterValidDesignation") }
                                                    }}
                                                />
                                            </FormGroup>
                                        </Col>
                                    </Row>
                                </CardBody>
                            </Card>
                        </Col>
                    </Row>

                    <Row className="mb-5">
                        <Col lg={12}>
                            <Card>
                                <CardHeader tag="h6">
                                    {t("AssignedRoles")}
                                </CardHeader>
                                <CardBody>
                                    {userHasRBACRole && (
                                        <div className="d-flex justify-content-end mb-2">
                                            <Link
                                                to={MANAGE_ROLES_ROUTES.ROLES_LIST}
                                                style={{
                                                    color: "#4472C4",
                                                    border: "unset",
                                                    cursor: "pointer",
                                                    background: "unset",
                                                    textDecoration: "underline",
                                                    padding: 0,
                                                    textAlign: "left"
                                                }}
                                            >
                                                Customize role
                                            </Link>
                                        </div>
                                    )}
                                    <div
                                        className="ag-theme-custom-react"
                                        style={{ height: `${roles.length === 0 ? 145 : 330}px` }}
                                    >
                                        <AgGridReact
                                            rowData={roles}
                                            columnDefs={RolesListColDefs}
                                            defaultColDef={defaultColDef}
                                            masterDetail
                                            rowSelection="multiple"
                                            frameworkComponents={{
                                                checkboxRenderer: CheckboxRenderer
                                            }}
                                            suppressRowClickSelection
                                            onGridReady={(params) => {
                                                setGridDesignationAPI(params.api);
                                                params.api.sizeColumnsToFit();
                                            }}
                                            isRowMaster={(dataItem) => (dataItem
                                                ? dataItem?.permissions?.length > 0 : false)}
                                            gridOptions={{
                                                getRowNodeId: (data) => data.uuid,
                                                suppressScrollOnNewData: true,
                                                detailCellRendererParams: {
                                                    detailGridOptions: {
                                                        columnDefs: PermissionColDefs,
                                                        defaultColDef,
                                                        suppressScrollOnNewData: true,
                                                        immutableData: true,
                                                        frameworkComponents: {
                                                            readRender: ReadRender,
                                                            writeRender: WriteRender,
                                                            approveRender: ApproveRender
                                                        },
                                                        getRowNodeId: (data) => data.feature.uuid,
                                                        onFirstDataRendered: (params) => {
                                                            params.api.sizeColumnsToFit();
                                                        }
                                                    },
                                                    getDetailRowData: (params) => {
                                                        params.successCallback(
                                                            params.data.permissions
                                                        );
                                                    }
                                                }
                                            }}
                                        />
                                    </div>
                                </CardBody>
                            </Card>
                        </Col>
                    </Row>

                    <Row className="mb-5">
                        {pathRoute === "organization"
                    && (
                        <>
                            <Col lg={6}>
                                <Card>
                                    <CardHeader tag="h6" className={classes.cardHeaderHeight}>
                                        <Row>
                                            <Col xs={6}>
                                                {t("Companies List")}
                                            </Col>
                                            <Col xs={4} className="text-right">
                                                {t("Company Admin")}
                                            </Col>
                                        </Row>
                                    </CardHeader>
                                    <CardBody>
                                        <div name="companyList">
                                            {companiesRoles.map((companiesRole) => (
                                                <Row key={companiesRole.companyUuid}>
                                                    <Col lg={6} className="d-flex align-items-center">
                                                        <label className="my-1 py-1" htmlFor={companiesRole.companyUuid}>
                                                            {" "}
                                                            {companiesRole.companyName}
                                                            {" "}
                                                        </label>
                                                    </Col>
                                                    <Col lg={4}>
                                                        <div className={`float-right my-1 py-1 ${classes.marginRight}`}>
                                                            <CustomInput type="checkbox" defaultChecked={checkCompanyAdmin(companiesRole)} id={companiesRole.companyUuid} name="companyAdmin" value={companiesRole.companyUuid} onChange={handleCompanyAdminCheckbox} />
                                                        </div>
                                                    </Col>
                                                    <Col lg={2}>
                                                        <button
                                                            type="button"
                                                            className={`btn btn-link float-right my-1 py-1 ${classes.buttonHeight}`}
                                                            onClick={() => removeCompany(
                                                                companiesRole.companyUuid
                                                            )}
                                                        >
                                                            <i className="fa fa-trash text-danger" />
                                                        </button>
                                                    </Col>
                                                </Row>
                                            ))}
                                        </div>
                                    </CardBody>
                                </Card>
                                <div className="my-2">
                                    <Button id="modalDefault101" color="primary" className={`float-right ${classes.addButton}`} onClick={doNothing}>
                                        +
                                        {t("Add")}
                                    </Button>
                                    <UncontrolledModal target="modalDefault101">
                                        <ModalHeader tag="h6">
                                            {t("Companies List")}
                                        </ModalHeader>
                                        <ModalBody>
                                            <div className="ag-theme-custom-react" style={{ height: "400px" }}>
                                                <AgGridReact
                                                    columnDefs={columnDefs}
                                                    defaultColDef={defaultColDef}
                                                    rowData={gridCompanies}
                                                    pagination
                                                    paginationPageSize={10}
                                                    rowSelection="multiple"
                                                    rowMultiSelectWithClick
                                                    onGridReady={onGridReady}
                                                />
                                            </div>
                                        </ModalBody>
                                        <ModalFooter>
                                            <UncontrolledModal.Close color="link">
                                                {t("Close")}
                                            </UncontrolledModal.Close>
                                            <span onClick={handleAddCompanies}>
                                                <UncontrolledModal.Close color="primary">
                                                    {t("Add")}
                                                </UncontrolledModal.Close>
                                            </span>
                                        </ModalFooter>
                                    </UncontrolledModal>
                                </div>
                            </Col>
                            <Col lg={6}>
                                <Card>
                                    <CardHeader tag="h6" className={classes.cardHeaderHeight}>
                                        {t("Security and Login")}
                                    </CardHeader>
                                    <CardBody className="pb-0">
                                        <Row>
                                            <Col lg={12}>
                                                {/* START Radios */}
                                                <div className="mb-3">
                                                    <CardTitle tag="h6">
                                                        {t("Set Password")}
                                                    </CardTitle>
                                                    <FormGroup onChange={passwordSelect}>
                                                        <Row className="align-items-center mx-0">
                                                            <RadioButton
                                                                id={passwordSelection[0]}
                                                                checked={passwordOption === passwordSelection[0]}
                                                                onChange={passwordSelect}
                                                            />
                                                            <Label className="mb-0 ml-2">
                                                                {t("Autogenerated password")}
                                                            </Label>
                                                        </Row>
                                                        <Row className="align-items-center mx-0">
                                                            <RadioButton
                                                                id={passwordSelection[1]}
                                                                checked={passwordOption === passwordSelection[1]}
                                                                onChange={passwordSelect}
                                                            />
                                                            <Label className="mb-0 ml-2">
                                                                {t("Custom password")}
                                                            </Label>
                                                        </Row>
                                                    </FormGroup>
                                                    {passwordOption === "customPassword" ? (
                                                        <Row>
                                                            <Col lg={10}>
                                                                <AvField
                                                                    type={inputPasswordType}
                                                                    name="password"
                                                                    placeholder={t("EnterPassword")}
                                                                    className="form-control form-control-md"
                                                                    value={customPassword}
                                                                    onChange={passwordOnCustom}
                                                                    validate={{
                                                                        required: { value: true, errorMessage: t("EnterValidPassword") }
                                                                    }}
                                                                    required
                                                                />
                                                            </Col>
                                                            {inputPasswordType === "password"
                                                                    && (
                                                                        <IconButton
                                                                            size="small"
                                                                            onClick={() => setInputPasswordType("text")}
                                                                            style={{
                                                                                height: 36,
                                                                                width: 36
                                                                            }}
                                                                        >
                                                                            <i className="fa fa-eye" />
                                                                        </IconButton>
                                                                    )}
                                                            {inputPasswordType === "text"
                                                                    && (
                                                                        <IconButton
                                                                            size="small"
                                                                            onClick={() => setInputPasswordType("password")}
                                                                            style={{
                                                                                height: 36,
                                                                                width: 36
                                                                            }}
                                                                        >
                                                                            <i className="fa fa-eye-slash" />
                                                                        </IconButton>
                                                                    )}
                                                        </Row>
                                                    ) : (
                                                        <Row className="form-group">
                                                            <Col lg={10}>
                                                                <input type="password" className="form-control form-control-md" value={customPassword} disabled />
                                                            </Col>
                                                        </Row>
                                                    )}
                                                </div>
                                                {/* END Radios */}
                                            </Col>
                                        </Row>
                                    </CardBody>
                                </Card>
                            </Col>
                        </>
                    )}
                    </Row>
                    {
                        pathRoute === "company"
                    && (
                        <Row className="mb-5">
                            <Col>
                                <Nav tabs className={classes.navTabs}>
                                    {tabList.map((tab) => (
                                        <NavItem key={tab.id}>
                                            <NavLink href="#" className={activeTab === tab.id ? "active" : null} onClick={() => handleTabClick(tab.id)}>
                                                <i className={`${tab.icon || "fa fa-fw fa-file-text"} mr-2`} />
                                                <span className={classes.navTabs}>{tab.name}</span>
                                            </NavLink>
                                        </NavItem>
                                    ))}
                                </Nav>
                                {
                                    activeTab === 1
                                    && (
                                        <Card className={classes.navCard}>
                                            <CardBody className={classes.cardBody}>
                                                <Row>
                                                    <Col lg={12}>
                                                        <Row className="justify-content-center">
                                                            <h3 className="pb-2">Can only assign task to user after successful creation.</h3>
                                                        </Row>
                                                        <ModulesTable
                                                            values={{ listModules }}
                                                            onChangeAction={onChangeAction}
                                                            disabled
                                                        />
                                                    </Col>
                                                </Row>
                                                <br />
                                            </CardBody>
                                        </Card>
                                    )
                                }
                                {
                                    activeTab === 2 && !location.pathname.includes("/company-users/create")
                                    && (
                                        <>
                                            <Card className={classes.navCard}>
                                                <CardBody className={classes.cardBody}>
                                                    <Row>
                                                        <Col lg={4}>
                                                            <AdministratorCheckTable
                                                                info={userManagement}
                                                                handleAdministratorCheckbox={handleAdministratorCheckbox}
                                                            />
                                                        </Col>
                                                        <Col lg={4}>
                                                            <AdministratorCheckTable
                                                                info={entitySetup}
                                                                handleAdministratorCheckbox={handleAdministratorCheckbox}
                                                            />
                                                        </Col>
                                                        <Col lg={4}>
                                                            <AdministratorCheckTable
                                                                info={bankConnection}
                                                                handleAdministratorCheckbox={handleAdministratorCheckbox}
                                                            />
                                                        </Col>
                                                    </Row>
                                                    <br />
                                                </CardBody>
                                            </Card>
                                        </>
                                    )
                                }
                                {
                                    activeTab === 4
                                    && (
                                        <Card>
                                            <CardHeader tag="h6" className={classes.cardHeaderHeight}>
                                                {t("Security and Login")}
                                            </CardHeader>
                                            <CardBody className="pb-0">
                                                <Row>
                                                    <Col lg={12}>
                                                        {/* START Radios */}
                                                        <div className="mb-3">
                                                            <CardTitle tag="h6">
                                                                {t("Set Password")}
                                                            </CardTitle>
                                                            <FormGroup onChange={passwordSelect}>
                                                                <Row className="align-items-center mx-0">
                                                                    <RadioButton
                                                                        id={passwordSelection[0]}
                                                                        checked={passwordOption === passwordSelection[0]}
                                                                        onChange={passwordSelect}
                                                                    />
                                                                    <Label className="mb-0 ml-2">
                                                                        {t("Autogenerated password")}
                                                                    </Label>
                                                                </Row>
                                                                <Row className="align-items-center mx-0">
                                                                    <RadioButton
                                                                        id={passwordSelection[1]}
                                                                        checked={passwordOption === passwordSelection[1]}
                                                                        onChange={passwordSelect}
                                                                    />
                                                                    <Label className="mb-0 ml-2">
                                                                        {t("Custom password")}
                                                                    </Label>
                                                                </Row>
                                                            </FormGroup>
                                                            {passwordOption === "customPassword" ? (
                                                                <Row>
                                                                    <Col lg={10}>
                                                                        <AvField
                                                                            type={inputPasswordType}
                                                                            name="password"
                                                                            placeholder={t("EnterPassword")}
                                                                            className="form-control form-control-md"
                                                                            value={customPassword}
                                                                            onChange={passwordOnCustom}
                                                                            validate={{
                                                                                required: { value: true, errorMessage: t("EnterValidPassword") }
                                                                            }}
                                                                            required
                                                                        />
                                                                    </Col>
                                                                    {inputPasswordType === "password"
                                                                                && (
                                                                                    <IconButton
                                                                                        size="small"
                                                                                        onClick={() => setInputPasswordType("text")}
                                                                                        style={{
                                                                                            height: 36,
                                                                                            width: 36
                                                                                        }}
                                                                                    >
                                                                                        <i className="fa fa-eye" />
                                                                                    </IconButton>
                                                                                )}
                                                                    {inputPasswordType === "text"
                                                                                && (
                                                                                    <IconButton
                                                                                        size="small"
                                                                                        onClick={() => setInputPasswordType("password")}
                                                                                        style={{
                                                                                            height: 36,
                                                                                            width: 36
                                                                                        }}
                                                                                    >
                                                                                        <i className="fa fa-eye-slash" />
                                                                                    </IconButton>
                                                                                )}
                                                                </Row>
                                                            ) : (
                                                                <Row className="form-group">
                                                                    <Col lg={10}>
                                                                        <input type="password" className="form-control form-control-md" value={customPassword} disabled />
                                                                    </Col>
                                                                </Row>
                                                            )}
                                                        </div>
                                                        {/* END Radios */}
                                                    </Col>
                                                </Row>
                                            </CardBody>
                                        </Card>
                                    )
                                }
                                {
                                    activeTab === 3
                                    && (
                                        <Card className={classes.navCard}>
                                            <CardBody className={classes.cardBody}>
                                                <Row>
                                                    <Col lg>
                                                        <textarea
                                                            className={`${classes.textArea1} form-control`}
                                                            value={remarks}
                                                            onChange={
                                                                (e) => setRemarks(e.target.value)
                                                            }
                                                        />
                                                    </Col>
                                                </Row>
                                                <br />
                                            </CardBody>
                                        </Card>
                                    )
                                }
                            </Col>
                        </Row>
                    )
                    }
                </Container>
                <StickyFooter>
                    <Row className="justify-content-between px-3 mx-0">
                        <Button
                            color="secondary"
                            className="mb-2"
                            onClick={() => history.goBack()}
                        >
                            {t("Back")}
                        </Button>
                        <ButtonSpinner text={t("Create")} className="mb-2" isLoading={isLoading} />
                    </Row>
                </StickyFooter>
            </AvForm>
        </>
    );
};

export default CreateUser;
